import OverideMethod.PDFTectStripperCustome;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.PDPageTree;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.pdfbox.text.TextPosition;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Iterator;
import java.util.List;

public class ReadPDF {


    public static void main(String[] args) {
        File file = new File("C:\\Users\\Administrator\\Downloads\\sample_def_aset.pdf");

        try {

            PDDocument doc = Loader.loadPDF(file);
            float isFOund = 0;

            System.out.println(doc.getNumberOfPages());
            for (int i =0 ; i < doc.getNumberOfPages() ; i++){

//                PDPage page = doc.getPage(i);
                System.out.println("Page "+i);
                float[] dataCor = PDFTectStripperCustome.getCoordiantes(doc,"{{signed}}",i+1);

                System.out.println(dataCor[0]+" "+dataCor[1]+" pages "+dataCor[2]);

                PDImageXObject pdImage = null;


                if ((int)dataCor[3]!=0){
                    isFOund = dataCor[3];

                    // time now
                    String timeNow = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

                    generateQr("temp\\qr\\qr.png",timeNow,"Tania Dwi Haryanti","Farras","123456789",100);

                    pdImage = PDImageXObject.createFromFile("temp\\qr\\qr.png", doc);

                    //  Memasukan ttd
                    PDPageContentStream contents = new PDPageContentStream(doc, doc.getPage((int)dataCor[2]-1), PDPageContentStream.AppendMode.APPEND, true, true);
                    contents.drawImage(pdImage,dataCor[0], dataCor[1]-(40f*((float) 60 /100)),50,50);



                    // Memasukan QR Code
//                    PDImageXObject pdImage2 = PDImageXObject.createFromFile("temp\\qr\\qr.png", doc);
//                   contents = new PDPageContentStream(doc, doc.getPage(0), PDPageContentStream.AppendMode.APPEND, true, true);

//                    contents.drawImage(pdImage2,0,0,100,100);
                    contents.close();
                    String host = "temp\\signed";
                    doc.save(host+"\\sample_def_signed.pdf");
                }

            }
            doc.close();

            if ((int)isFOund!=0){

            }


        } catch (IOException e) {
            throw new RuntimeException(e);
        }

    }
//

    public static void generateQr(String path, String time, String approver, String aplicant, String apllicantId, int height){
        String data ="{\"status\":\"disetuji pada tingkat pertama\", \"waktu\":\""+time+"\", \"oleh\":\""+approver+"\",\"nama_pengaju\":\""+aplicant+"\",\"id_pengaju\":\""+apllicantId+"\"}";

//        String data ="asd";

        try {
            ByteArrayOutputStream pngOutputStream = new ByteArrayOutputStream();
//            String [] text = {"Generated by System"};
            BitMatrix matrix = new MultiFormatWriter().encode(
                    new String(data.getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8),
                    BarcodeFormat.QR_CODE, 1000, 1000);
            MatrixToImageWriter.writeToStream(
                    matrix,
                    "png",
                    pngOutputStream);


            byte[] pngData = pngOutputStream.toByteArray();

            //        If text is needed to display




//                int totalTextLineToadd = text.length;
                InputStream in = new ByteArrayInputStream(pngData);
                BufferedImage image = ImageIO.read(in);

//                BufferedImage outputImage = new BufferedImage(image.getWidth(), image.getHeight() + 25 * totalTextLineToadd, BufferedImage.TYPE_INT_ARGB);
                Graphics g = image.getGraphics();

                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
                g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);


//                g.setColor(Color.WHITE);
////                g.fillRect(0, 0, outputImage.getWidth(), outputImage.getHeight());
//                g.drawImage(image, 0, 0, image.getWidth(), image.getHeight(), null);
//                g.setFont(new Font("Arial Black", Font.BOLD, 12));
//                Color textColor = Color.BLACK;
//                g.setColor(textColor);
//                FontMetrics fm = g.getFontMetrics();
//                int startingYposition = 10 + 5;
//                for (String displayText : text) {
//                    g.drawString(displayText, (outputImage.getWidth() / 2) - (fm.stringWidth(displayText) / 2), startingYposition);
//                    startingYposition += 20;
//                }
                ByteArrayOutputStream baos = new ByteArrayOutputStream();


                // QR sudah terbentuk sekarang memasang QR dengan TTD
                BufferedImage logo = ImageIO.read(new File("assets\\signed-qr.png"));
                g = image.getGraphics();

                System.out.println("X "+image.getWidth()/2);
                System.out.println("Y "+image.getHeight()/2);
                // setup posisi dan besarn dari logo
                g.drawImage(logo, (image.getWidth()/2)-90, (image.getHeight()/2)-90,200, 200,  null);

                ImageIO.write(image, "PNG", new File(path));
                baos.flush();
                pngData = baos.toByteArray();
                baos.close();


        } catch (WriterException e) {
            throw new RuntimeException(e);
        }
        catch (IOException e){
            e.printStackTrace();
        }

    }


}
